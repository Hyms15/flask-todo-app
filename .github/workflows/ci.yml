---
name: Flask CI Pipeline

# ------------------------------
# Global settings and permissions
# ------------------------------
permissions:
  contents: read
  packages: none
  security-events: none

# Global environment variables
env:
  OWNER: ${{ github.repository_owner }}
  SHA: ${{ github.sha }}
  RUN: ${{ github.run_number }}

# Trigger on push and pull requests
on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

# ------------------------------
# Jobs
# ------------------------------
jobs:
  # 1Ô∏è‚É£ BUILD & UNIT TEST
  build-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          echo "‚úÖ Installed dependencies:"
          pip list

      - name: Run unit tests
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          echo "üöÄ Running unit tests..."
          python -m pytest tests/unit --disable-warnings -q

  # 2Ô∏è‚É£ INTEGRATION TEST
  integration-test:
    runs-on: ubuntu-latest
    needs: build-test
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          echo "‚úÖ Installed dependencies:"
          pip list

      - name: Run integration tests
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          echo "üöÄ Running integration tests..."
          python -m pytest tests/integration --disable-warnings -q

  # 3Ô∏è‚É£ LINT DOCKERFILE
  lint-dockerfile:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Lint Dockerfile with Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          config: .hadolint.yaml

  # 4Ô∏è‚É£ BUILD DOCKER IMAGE
  docker-build:
    runs-on: ubuntu-latest
    needs: [build-test, integration-test, lint-dockerfile]
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          echo "üê≥ Building Docker image..."
          docker build -t flask-todo-app:ci-${{ github.run_number }} .
          echo "‚úÖ Image built successfully: flask-todo-app:ci-${{ github.run_number }}"

  # 5Ô∏è‚É£ PUSH IMAGE TO GHCR
  docker-push:
    runs-on: ubuntu-latest
    if: success() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: docker-build
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build and push Docker image to GHCR
        run: |
          set -e
          OWNER_LC=$(echo "$OWNER" | tr '[:upper:]' '[:lower:]')
          BASE=ghcr.io/${OWNER_LC}/flask-todo-app
          SHORT_SHA=${SHA::7}
          IMAGE_TAG=${RUN}-${SHORT_SHA}
          echo "üèóÔ∏è Building & pushing immutable tag: ${IMAGE_TAG}"
          docker buildx build --push -t ${BASE}:${IMAGE_TAG} .

  # 6Ô∏è‚É£ CONTAINER SECURITY SCAN
  container-scan:
    runs-on: ubuntu-latest
    needs: docker-push
    permissions:
      contents: read
      security-events: write
      packages: read
    env:
      OWNER: ${{ github.repository_owner }}
      SHA: ${{ github.sha }}
      RUN: ${{ github.run_number }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Install Trivy
        uses: aquasecurity/setup-trivy@v0.2.2

      - name: Run Trivy vulnerability scanner
        run: |
          OWNER_LC=$(echo "$OWNER" | tr '[:upper:]' '[:lower:]')
          SHORT_SHA=${SHA::7}
          IMAGE_TAG=${RUN}-${SHORT_SHA}
          IMAGE_NAME=ghcr.io/${OWNER_LC}/flask-todo-app:${IMAGE_TAG}

          echo "üîç Scanning image: $IMAGE_NAME"
          trivy image --exit-code 0 --pkg-types os,library --severity HIGH,CRITICAL --format table $IMAGE_NAME

  # 7Ô∏è‚É£ CLEANUP OLD IMAGES
  cleanup-old-images:
    runs-on: ubuntu-latest
    needs: docker-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      packages: write

    steps:
      - name: Cleanup old GHCR images
        uses: devops-infra/action-ghcr-cleanup@v1
        with:
          package-type: container
          package-name: flask-todo-app
          keep-latest: 5
          token: ${{ secrets.GHCR_PAT }}

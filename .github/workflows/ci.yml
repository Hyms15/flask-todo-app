name: Flask CI Pipeline

# Default permissions for all jobs (Least Privilege)
permissions:
  contents: read
  packages: none
  security-events: none

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

jobs:
  build-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read   # only needs to read repo files

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          echo "‚úÖ Installed dependencies:"
          pip list

      - name: Run unit tests
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          echo "üöÄ Running unit tests..."
          python -m pytest tests/unit --disable-warnings -q

  integration-test:
    runs-on: ubuntu-latest
    needs: build-test
    permissions:
      contents: read   # no write required

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          echo "‚úÖ Installed dependencies:"
          pip list

      - name: Run integration tests
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          echo "üöÄ Running integration tests..."
          python -m pytest tests/integration --disable-warnings -q

  lint-dockerfile:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Lint Dockerfile with Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          config: .hadolint.yaml

  docker-build:
    runs-on: ubuntu-latest
    needs: [build-test, integration-test, lint-dockerfile]
    permissions:
      contents: read
      packages: write   # we‚Äôre building an image, may need push later
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          echo "üê≥ Building Docker image..."
          docker build -t flask-todo-app:ci-${{ github.run_number }} .
          echo "‚úÖ Image built successfully: flask-todo-app:ci-${{ github.run_number }}"

  docker-push:
    runs-on: ubuntu-latest
    needs: docker-build
    permissions:
      contents: read
      packages: write   # required to push to GHCR

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}


      - name: Build and push Docker image to GHCR
        env:
          OWNER: ${{ github.repository_owner }}
        run: |
          OWNER_LC=$(echo "$OWNER" | tr '[:upper:]' '[:lower:]')
          IMAGE_NAME=ghcr.io/${OWNER_LC}/flask-todo-app:${{ github.run_number }}
          echo "üèóÔ∏è Building and pushing image: $IMAGE_NAME"
          docker buildx build --push -t $IMAGE_NAME .

  container-scan:
    runs-on: ubuntu-latest
    needs: docker-push
    permissions:
      contents: read
      security-events: write
      packages: read   # ‚úÖ allow GHCR image access

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # ‚úÖ Login to GHCR to allow Trivy to pull the image
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}
      # ‚úÖ Install Trivy
      - name: Install Trivy
        uses: aquasecurity/setup-trivy@v0.2.2

      # ‚úÖ Run Trivy scan
      - name: Run Trivy vulnerability scanner
        env:
          OWNER: ${{ github.repository_owner }}
        run: |
          # Convert OWNER to lowercase
          OWNER_LC=$(echo "$OWNER" | tr '[:upper:]' '[:lower:]')

          # Define image name
          IMAGE_NAME=ghcr.io/${OWNER_LC}/flask-todo-app:${{ github.run_number }}
          echo "üîç Scanning image: $IMAGE_NAME"

          # Run Trivy scan (pkg-types replaces deprecated vuln-type)
          trivy image --exit-code 0 --pkg-types os,library --severity HIGH,CRITICAL --format table $IMAGE_NAME

